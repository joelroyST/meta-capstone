// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String?  @unique
  facebookId      String   @unique
  provider        String
  favoriteTeams   String[] // Changed to String[] because id of model Team is a String type
  favoritePlayers Int[] // Changed to Int[] becuase id of model Player is an Int type
  leagues         Int[] // Changed to Int[] because id of model League is an Int type
  Trade           Trade[]

  Subscription Subscription[]
}

model Team {
  id       String @id // This is from the id the api assigns
  players  Int[] // This refers to refPlayer model
  city     String
  nickName String
  confName String
}

model Game {
  gameId                  Int                       @id
  date                    DateTime
  arena                   String?
  city                    String?
  state                   String?
  homeTeamId              Int
  awayTeamId              Int
  homeTeamPoints          Int
  awayTeamPoints          Int
  homeTeamLogo            String?
  awayTeamLogo            String?
  PlayerStatisticsPerGame PlayerStatisticsPerGame[]
}

model PlayerStatisticsPerGame {
  id            Int    @id @default(autoincrement())
  gameId        Int
  game          Game   @relation(fields: [gameId], references: [gameId])
  playerId      Int
  teamId        Int
  points        Int
  position      String
  minPlayed     String
  fgm           Int
  fga           Float
  ftm           Int
  fta           Int
  ftp           String
  tpm           Int
  tpa           Int
  tpp           String
  offReb        Int
  defReb        Int
  totReb        Int
  assists       Int
  personalFouls Int
  steals        Int
  turnovers     Int
  blocks        Int
  plusMinus     String
  comment       String?

  @@unique([playerId, gameId]) // Prevents duplicate entries for the same player and game (one row per player per game)
  @@index([playerId]) // Helps for faster searches when fetching for games of a specified time for a specific player
  @@index([gameId]) // Faster fetching for player stats in a specific game
}

model Subscription {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  playerId          Int
  startDate         DateTime
  endDate           DateTime
  statsUpdateWindow Int // Ex: 7 => Jan. 1 - Jan. 7 is one window (7 days)
  updateFrequency   Int
  createdAt         DateTime @default(now())

  SubscriptionSummary SubscriptionSummary[]
}

model SubscriptionSummary {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  windowStart    DateTime
  windowEnd      DateTime
  createdAt      DateTime     @default(now())

  @@unique([subscriptionId, windowStart, windowEnd]) // Makes sure to not create duplicate summaries for the same player in the same time range
}

model Player {
  playerId      Int     @id
  firstName     String
  lastName      String
  teamId        String? // Refers to real life team
  fantasyTeamId String? // Refers to fantasy team
  value         Int
}

model RefPlayer {
  id       Int  @id
  metadata Json
}

model League {
  leagueId Int    @id
  name     String
  users    Int[] // Changed to Int[] because model User has an id of type Int
}

model FantasyTeam {
  userId    Int
  leagueId  Int
  name      String
  playerIds Int[]

  @@id([userId, leagueId])
}

model Trade {
  recordId           Int   @id @default(autoincrement())
  tradeId            Int
  proposerId         Int
  proposer           User  @relation(fields: [proposerId], references: [id])
  user1Id            Int
  user2Id            Int
  user1PlayersToGive Int[] // Player IDs user1 is giving to user2
  user2PlayersToGive Int[] // Player IDs user2 is giving to user1
  leagueId           Int
  confirmationUser1  Int   @default(1)
  confirmationUser2  Int   @default(1)
}